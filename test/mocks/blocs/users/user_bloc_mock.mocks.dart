// Mocks generated by Mockito 5.4.4 from annotations
// in sokrio_users/test/mocks/blocs/users/user_bloc_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sokrio_users/src/features/users/domain/use_cases/get_cached_users.dart'
    as _i3;
import 'package:sokrio_users/src/features/users/domain/use_cases/get_users.dart'
    as _i2;
import 'package:sokrio_users/src/features/users/presentation/bloc/user_bloc.dart'
    as _i4;
import 'package:sokrio_users/src/features/users/presentation/bloc/user_event.dart'
    as _i8;
import 'package:sokrio_users/src/features/users/presentation/bloc/user_state.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetUsers_0 extends _i1.SmartFake implements _i2.GetUsers {
  _FakeGetUsers_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCachedUsers_1 extends _i1.SmartFake
    implements _i3.GetCachedUsers {
  _FakeGetCachedUsers_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserBloc extends _i1.Mock implements _i4.UserBloc {
  MockUserBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetUsers get getUsers => (super.noSuchMethod(
        Invocation.getter(#getUsers),
        returnValue: _FakeGetUsers_0(
          this,
          Invocation.getter(#getUsers),
        ),
      ) as _i2.GetUsers);

  @override
  _i3.GetCachedUsers get getCachedUsers => (super.noSuchMethod(
        Invocation.getter(#getCachedUsers),
        returnValue: _FakeGetCachedUsers_1(
          this,
          Invocation.getter(#getCachedUsers),
        ),
      ) as _i3.GetCachedUsers);

  @override
  _i5.UserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.dummyValue<_i5.UserState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.UserState);

  @override
  _i7.Stream<_i5.UserState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.UserState>.empty(),
      ) as _i7.Stream<_i5.UserState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i8.UserEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.UserEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.UserState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.UserEvent>(
    _i9.EventHandler<E, _i5.UserState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i9.Transition<_i8.UserEvent, _i5.UserState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDone(
    _i8.UserEvent? event, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #onDone,
          [
            event,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onChange(_i9.Change<_i5.UserState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
